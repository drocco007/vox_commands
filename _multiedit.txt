# coding=utf-8

import re

from dragonfly import *


release = Key("shift:up, ctrl:up")


#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
    'ash': Key("a"),
    'bee': Key("b"),
    'cee': Key("c"),
    'dee': Key("d"),
    'eesh': Key("e"),
    'fox': Key("f"),
    'golf': Key("g"),
    'ah': Key("h"),
    'ish': Key("i"),
    'kilo': Key("k"),
    'ell': Key("l"),
    'mike': Key("m"),
    'anne': Key("n"),
    # 'nape': Key("n"),
    'osh': Key("o"),
    'pee': Key("p"),
    'Queen': Key("q"),
    'ran': Key("r"),
    'ess': Key("s"),

    # GAH! just. no.
    #'Tah': Key("t"),

    'oosh': Key("u"),
    'ecks': Key("x"),
    'why': Key("y"),
    'Zed': Key("z"),

    'CD': Key('c,d'),
    'oss': Key('o,s'),
    'pie': Key('p,y'),
    'Wix': Key('w,x'),

    'dev': Key('d,e,v'),
    'lib': Key('l,i,b'),
    'ssh': Key('s,s,h'),

    'comma': Key('comma'),
    'Comps': Key('comma, space'),

    # 'semicolon': Key('semicolon'),
    'colon': Key('colon'),
    'Line term': Key('end, semicolon'),

    'Squeeze': Key('equals'),
    'equal': Key('space, equals, space'),
    'equals': Key('space, equals, space'),

    'Grid': Key('hash'),
    'Bang': Key('exclamation'),
    'Shebang': Key('hash, exclamation'),
    'Cash': Key('dollar'),
    'ive': Key('hyphen'),
    'spive': Key('space, hyphen'),
    'tick': Key('apostrophe'),
    'ticks': Key('dquote'),
    'dot': Key('dot'),
    'plus': Key('space, plus, space'),
    'ooot': Key('percent'),
    'Spike': Key('bar'),
    '(Star | Splat)': Key('asterisk'),
    'Double (Star | Splat)': Key('asterisk:2'),

    'Squid': Key('tilde'),
    'Slash':  Key('slash'),
    'Splash':  Key('space, slash'),

    'Slide': Key('backslash'),
    #'Splide': Key('space, backslash'),
    'Spear': Text(u' â†’ '),

    'laip': Key('lparen'),
    'raip': Key('rparen'),
    'lack': Key('lbracket'),
    'rack': Key('rbracket'),
    'lace': Key('lbrace'),
    'race': Key('rbrace'),
    'lang': Key('langle'),
    'rang': Key('rangle'),

    # Extensions

    'dot <extension>': Text('.%(extension)s'),


    # Navigation

    'Cancel': Key('escape'),
    "[<n>] up":                         Key("up:%(n)d"),
    "[<n>] down":                       Key("down:%(n)d"),
    "[<n>] left":                       Key("left:%(n)d"),
    "[<n>] right":                      Key("right:%(n)d"),
    "[<n>] page up":                    Key("pgup:%(n)d"),
    "[<n>] page down":                  Key("pgdown:%(n)d"),
    "up <n> (page | pages)":            Key("pgup:%(n)d"),
    "down <n> (page | pages)":          Key("pgdown:%(n)d"),

    "lerd":          Key("c-left"),
    "<n> lerd":          Key("c-left:%(n)d"),
    "erd":         Key("c-right"),
    "<n> erd":         Key("c-right:%(n)d"),

    "home":                             Key("home"),
    "ear":                             Key("home"),
    "are":                              Key("end"),
    "doc home":                         Key("c-home"),
    "doc end":                          Key("c-end"),

    "[<n>] space":                      release + Key("space:%(n)d"),
    "[<n>] enter":                      release + Key("enter:%(n)d"),
    "[<n>] slap":                      release + Key("enter:%(n)d"),

    "[<n>] tab":                        Key("tab:%(n)d"),
    "[<n>] delete":                     release + Key("del:%(n)d"),
    "delete [<n> | this] (line|lines)": release + Key("home, s-down:%(n)d, del"),
    "[<n>] backspace":                  release + Key("backspace:%(n)d"),
    "pop up":                           release + Key("apps"),

    "paste that":                            release + Key("c-v"),
    "duplicate <n>":                    release + Key("c-c, c-v:%(n)d"),
    "copy":                             release + Key("c-c"),
    "cut":                              release + Key("c-x"),
    "select all":                       release + Key("c-a"),
    "[hold] shift":                     Key("shift:down"),
    "release shift":                    Key("shift:up"),
    "[hold] control":                   Key("ctrl:down"),
    "release control":                  Key("ctrl:up"),
    "release [all]":                    release,

    # "say <text>":                       release + Text("%(text)s"),
    "mimic <text>":                     release + Mimic(extra="text"),
}


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

breakpoints = re.compile('[\s-]+')


# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.

    if not text:
      return '_'
    else:
      return "_".join(breakpoints.split(text)).lower()

def format_self_dot(dictation):          # Function name must start with "format_".
    """ self dot <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.

    if not text:
      return 'self.'
    else:
      return 'self.' + '_'.join(breakpoints.split(text)).lower()

def format_this_dot(dictation):          # Function name must start with "format_".
    """ this dot <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.

    if not text:
      return 'this.'
    else:
      return 'this.' + '_'.join(breakpoints.split(text)).lower()

# Format: some-words
def format_hyphenate(dictation):          # Function name must start with "format_".
    """ dash <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.

    if not text:
      return '-'
    else:
      return "-".join(breakpoints.split(text)).lower()

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation)
    return "_".join(breakpoints.split(text)) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in breakpoints.split(text)]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ squash <dictation> """
    text = str(dictation)
    return "".join(breakpoints.split(text))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ pumpkin <dictation> """
    text = str(dictation)
    words = [word.upper() for word in breakpoints.split(text)]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in breakpoints.split(text)]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ Camel <dictation> """
    text = str(dictation)
    words = breakpoints.split(text)
    return words[0] + "".join(w.capitalize() for w in words[1:])

# FIXME:too sensitive
# def format_at_something(dictation):
#    """ at <dictation> """
#    text = str(dictation)
#    words = [word.lower() for word in text.split(" ")]
#    return '@' + ".".join(words)
