#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

release = Key("shift:up, ctrl:up")


#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
   'ash': Key("a"),
   'bip': Key("b"),
   'cash': Key("c"),
   'dit': Key("d"),
   'eesh': Key("e"),
   'ish': Key("i"),
   'osh': Key("o"),
   'Queen': Key("q"),
   'Tah': Key("t"),

   'comma': Key('comma'),
   'Comps': Key('comma, space'),

   # 'semicolon': Key('semicolon'),
   'colon': Key('colon'),
   
   'Squeeze': Key('equals'),
   'equal': Key('space, equals, space'),
   'equals': Key('space, equals, space'),

   #Conflicts with ash
   #'hash': Key('hash'),
   'hyphen': Key('hyphen'),
   'spy': Key('space, hyphen'),
   'tick': Key('apostrophe'),
   'dot': Key('dot'),
   'plus': Key('space, plus, space'),
   'ooot': Key('percent'),
   'Spike': Key('bar'),
   '(Star | Splat)': Key('asterisk'),
   'Double (Star | Splat)': Key('asterisk:2'),

   'Squid': Key('tilde'),
   'Slash':  Key('slash'),
   'Slide': Key('backslash'),

   'laip': Key('lparen'),
   'raip': Key('rparen'),
   'lack': Key('lbracket'),
   'rack': Key('rbracket'),
   'lace': Key('lbrace'),
   'race': Key('rbrace'),
   'lang': Key('langle'),
   'rang': Key('rangle'),

           # Spoken-form    ->    ->    ->     Action object

           'Cancel': Key('escape'),
           "[<n>] up":                         Key("up:%(n)d"),
           "[<n>] down":                       Key("down:%(n)d"),
           "[<n>] left":                       Key("left:%(n)d"),
           "[<n>] right":                      Key("right:%(n)d"),
           "[<n>] page up":                    Key("pgup:%(n)d"),
           "[<n>] page down":                  Key("pgdown:%(n)d"),
           "up <n> (page | pages)":            Key("pgup:%(n)d"),
           "down <n> (page | pages)":          Key("pgdown:%(n)d"),

           "lerd":          Key("c-left"),
           "<n> lerd":          Key("c-left:%(n)d"),
           "erd":         Key("c-right"),
           "<n> erd":         Key("c-right:%(n)d"),
           
           "home":                             Key("home"),
           "ear":                             Key("home"),
           "are":                              Key("end"),
           "doc home":                         Key("c-home"),
           "doc end":                          Key("c-end"),

           "[<n>] space":                      release + Key("space:%(n)d"),
           "[<n>] enter":                      release + Key("enter:%(n)d"),
           "[<n>] slap":                      release + Key("enter:%(n)d"),

           "[<n>] tab":                        Key("tab:%(n)d"),
           "[<n>] delete":                     release + Key("del:%(n)d"),
           "delete [<n> | this] (line|lines)": release + Key("home, s-down:%(n)d, del"),
           "[<n>] backspace":                  release + Key("backspace:%(n)d"),
           "pop up":                           release + Key("apps"),

           "paste":                            release + Key("c-v"),
           "duplicate <n>":                    release + Key("c-c, c-v:%(n)d"),
           "copy":                             release + Key("c-c"),
           "cut":                              release + Key("c-x"),
           "select all":                       release + Key("c-a"),
           "[hold] shift":                     Key("shift:down"),
           "release shift":                    Key("shift:up"),
           "[hold] control":                   Key("ctrl:down"),
           "release control":                  Key("ctrl:up"),
           "release [all]":                    release,

           "say <text>":                       release + Text("%(text)s"),
           "mimic <text>":                     release + Mimic(extra="text"),
          }

#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_score(dictation):          # Function name must start with "format_".
    """ score <dictation> """         # Docstring defining spoken-form.
    text = str(dictation)             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ under func <dictation> """
    text = str(dictation)
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_java_method(dictation):
    """ Java method <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0] + "".join(w.capitalize() for w in words[1:])

# FIXME:too sensitive
# def format_at_something(dictation):
#    """ at <dictation> """
#    text = str(dictation)
#    words = [word.lower() for word in text.split(" ")]
#    return '@' + ".".join(words)
